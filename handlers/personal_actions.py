# - *- coding: utf- 8 - *-
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hlink

from dispatcher import dp
from filters import IsAdmin
from keyboards import *
from utils import is_user, add_user
from states import OpenQuestion
from utils.openai_api.openai import get_resort

import logging
import datetime
import re


DATE_REGEX = r'^(0[1-9]|[1-2][0-9]|3[0-1])[/\-.](0[1-9]|1[0-2])[/\-.]([0-9]{4})$'


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    ans = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name.title()}\n"
    if not await is_user(message.from_user.id):
        await add_user(message.from_user.id, message.from_user.username)
        ans += "–Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã—Ö –∫—É—Ä–æ—Ä—Ç–æ–≤ –≤ –†–æ—Å—Å–∏–∏!\n"
    else:
        ans += '–†–∞–¥—ã —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!'
    await message.bot.send_message(message.chat.id, ans, reply_markup=start_reply_kb)


@dp.message_handler(commands=['menu'])
async def menu(message: types.Message):
    await message.bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=start_reply_kb)


@dp.message_handler(Text(equals='üìñ –ü–æ–¥–±–æ—Ä –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω–æ–≥–æ –∫—É—Ä–æ—Ä—Ç–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é'))
async def open_question(message: types.Message):
    await OpenQuestion.vacation_start.set()
    await message.bot.send_message(message.chat.id,
                                   "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥-–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ "
                                   "–∫–æ–≥–¥–∞ –±—ã –í—ã —Ö–æ—Ç–µ–ª–∏ —Å—ä–µ–∑–¥–∏—Ç—å –Ω–∞ –∫—É—Ä–æ—Ä—Ç",
                                   reply_markup=cancel_reply_kb)


@dp.message_handler(Text(equals='üìñ –ü–æ–¥–±–æ—Ä –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω–æ–≥–æ –∫—É—Ä–æ—Ä—Ç–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º'))
async def close_question(message: types.Message):
    await message.bot.send_message(message.chat.id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", reply_markup=start_reply_kb)


@dp.message_handler(state='*', commands='‚õî –û—Ç–º–µ–Ω–∞')
@dp.message_handler(Text(equals='‚õî –û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info(f'From {message.from_user.id}\n'
                 f'Cancelling state {current_state}\n'
                 f'At {datetime.datetime.now()}\n\n')
    await state.finish()
    await message.reply('–û—Ç–º–µ–Ω–∞...', reply_markup=start_reply_kb)


@dp.message_handler(state=OpenQuestion.vacation_start)
async def vacation_date_close_question(message: types.Message, state: FSMContext):
    try:
        start, end = message.text.split('-')
        if not (re.match(DATE_REGEX, start.strip()) and re.match(DATE_REGEX, start.strip())):
            raise ValueError
    except ValueError:
        await message.bot.send_message(message.chat.id,
                                       "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥-–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥!\n"
                                       "–ù–∞–ø—Ä–∏–º–µ—Ä: 12.12.2023-20.12.2023",
                                       reply_markup=cancel_reply_kb)
        return
    await state.update_data(vacation_start=start)
    await state.update_data(vacation_end=end)
    await OpenQuestion.request.set()
    await message.bot.send_message(message.chat.id,
                                   "–û–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö –í–∞—à –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–¥—ã—Ö?",
                                   reply_markup=cancel_reply_kb)


@dp.message_handler(state=OpenQuestion.request)
async def request_close_question(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        start = data['vacation_start']
        end = data['vacation_end']
    await state.finish()
    msq_to_ai = f"–ü–æ–¥–±–µ—Ä–∏ 1 –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π –∫—É—Ä–æ—Ä—Ç –≤ –†–æ—Å—Å–∏–∏ –Ω–∞ –¥–∞—Ç—ã {start}-{end}, " \
                f"—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–π —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É:{message.text}"
    response = await get_resort(msq_to_ai)
    await message.bot.send_message(message.chat.id,
                                   response,
                                   reply_markup=start_reply_kb)
