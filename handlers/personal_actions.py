# - *- coding: utf- 8 - *-
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hlink

from dispatcher import dp
from filters import IsAdmin
from keyboards import *
from utils import is_user, add_user, add_finding
from states import OpenQuestion, CloseQuestion
from utils.openai_api.openai import get_resort
from utils.agregator import get_tour

import logging
import datetime
import re


DATE_REGEX = r'^(0[1-9]|[1-2][0-9]|3[0-1])[/.](0[1-9]|1[0-2])[/.]([0-9]{4})$'


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    ans = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name.title()}\n"
    if not await is_user(message.from_user.id):
        await add_user(message.from_user.id, message.from_user.username)
        ans += "–Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã—Ö –∫—É—Ä–æ—Ä—Ç–æ–≤ –≤ –†–æ—Å—Å–∏–∏!\n"
    else:
        ans += '–†–∞–¥—ã —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!'
    await message.bot.send_message(message.chat.id, ans, reply_markup=start_reply_kb)


@dp.message_handler(commands=['menu'])
async def menu(message: types.Message):
    await message.bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=start_reply_kb)


@dp.message_handler(Text(equals='üìñ –ü–æ–¥–±–æ—Ä –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω–æ–≥–æ –∫—É—Ä–æ—Ä—Ç–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é'))
async def open_question(message: types.Message):
    await OpenQuestion.vacation_start.set()
    await message.bot.send_message(message.chat.id,
                                   "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥-–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ "
                                   "–∫–æ–≥–¥–∞ –±—ã –í—ã —Ö–æ—Ç–µ–ª–∏ —Å—ä–µ–∑–¥–∏—Ç—å –Ω–∞ –∫—É—Ä–æ—Ä—Ç",
                                   reply_markup=cancel_reply_kb)


@dp.message_handler(Text(equals='üìñ –ü–æ–¥–±–æ—Ä –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω–æ–≥–æ –∫—É—Ä–æ—Ä—Ç–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º'))
async def close_question(message: types.Message):
    await CloseQuestion.vacation_start.set()
    await message.bot.send_message(message.chat.id,
                                   "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤–∞—à–µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ "
                                   "–∫–æ–≥–¥–∞ –±—ã –í—ã —Ö–æ—Ç–µ–ª–∏ —Å—ä–µ–∑–¥–∏—Ç—å –Ω–∞ –∫—É—Ä–æ—Ä—Ç",
                                   reply_markup=cancel_reply_kb)


@dp.message_handler(state='*', commands='‚õî –û—Ç–º–µ–Ω–∞')
@dp.message_handler(Text(equals='‚õî –û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info(f'From {message.from_user.id}\n'
                 f'Cancelling state {current_state}\n'
                 f'At {datetime.datetime.now()}\n\n')
    await state.finish()
    await message.reply('–û—Ç–º–µ–Ω–∞...', reply_markup=start_reply_kb)


@dp.message_handler(state=OpenQuestion.vacation_start)
async def vacation_date_open_question(message: types.Message, state: FSMContext):
    try:
        start, end = message.text.split('-')
        if not (re.match(DATE_REGEX, start.strip()) and re.match(DATE_REGEX, start.strip())):
            raise ValueError
    except ValueError:
        await message.bot.send_message(message.chat.id,
                                       "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥-–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥!\n"
                                       "–ù–∞–ø—Ä–∏–º–µ—Ä: 12.12.2023-20.12.2023",
                                       reply_markup=cancel_reply_kb)
        return
    await state.update_data(vacation_start=start)
    await state.update_data(vacation_end=end)
    await OpenQuestion.request.set()
    await message.bot.send_message(message.chat.id,
                                   "–û–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö –í–∞—à –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–¥—ã—Ö?",
                                   reply_markup=cancel_reply_kb)


@dp.message_handler(state=OpenQuestion.request)
async def request_open_question(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        start = data['vacation_start']
        end = data['vacation_end']
    msq_to_ai = f"–ü–æ–¥–±–µ—Ä–∏ 1 –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π –∫—É—Ä–æ—Ä—Ç –Ω–∞ –¥–∞—Ç—ã {start}-{end}, " \
                f"—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–π —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n{message.text}"
    await message.bot.send_message(message.chat.id,
                                   '–ü–æ–¥–±–∏—Ä–∞–µ–º –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π –∫—É—Ä–æ—Ä—Ç...',
                                   reply_markup=start_reply_kb)
    response, time = await get_resort(msq_to_ai)
    await state.update_data(response_time=time)
    await OpenQuestion.estimate.set()
    await message.bot.send_message(message.chat.id,
                                   response)
    await message.bot.send_message(message.chat.id,
                                   '–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞–º–∏ –∫—É—Ä–æ—Ä—Ç–∞',
                                   reply_markup=estimate_reply_kb)


@dp.message_handler(state=OpenQuestion.estimate)
async def request_estimate(message: types.Message, state: FSMContext):
    if isinstance(int(message.text), int):
        if not(1 <= int(message.text) <= 10):
            await message.bot.send_message(message.chat.id,
                                           '–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10',
                                           reply_markup=estimate_reply_kb)
            return
    else:
        await message.bot.send_message(message.chat.id,
                                       '–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10',
                                       reply_markup=estimate_reply_kb)
        return
    async with state.proxy() as data:
        time = data['response_time']
    await state.finish()
    await add_finding(message.from_user.id, int(message.text), time, True)
    await message.bot.send_message(message.chat.id,
                                   '–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –ø–æ –ø–æ–¥–±–æ—Ä—É –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π –∫—É—Ä–æ—Ä—Ç–æ–≤!',
                                   reply_markup=start_reply_kb)


@dp.message_handler(state=CloseQuestion.vacation_start)
async def vacation_start_date_close_question(message: types.Message, state: FSMContext):
    try:
        if not re.match(DATE_REGEX, message.text.strip()):
            raise ValueError
        else:
            start = datetime.datetime.strptime(message.text.strip(), '%d.%m.%Y')
    except ValueError:
        await message.bot.send_message(message.chat.id,
                                       "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç–¥—ã—Ö–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥!\n"
                                       "–ù–∞–ø—Ä–∏–º–µ—Ä: 12.12.2023",
                                       reply_markup=cancel_reply_kb)
        return
    await state.update_data(vacation_start=start)
    await CloseQuestion.vacation_end.set()
    await message.bot.send_message(message.chat.id,
                                   "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–≤ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥\n"
                                   "–õ–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã—ã",
                                   reply_markup=duration_reply_kb)


@dp.message_handler(state=CloseQuestion.vacation_end)
async def vacation_end_date_close_question(message: types.Message, state: FSMContext):
    try:
        if not re.match(DATE_REGEX, message.text.strip()):
            if message.text not in ['–ù–∞ 2..4 –Ω–æ—á–∏', '–ù–∞ –Ω–µ–¥–µ–ª—é', '–ù–∞ 10 –Ω–æ—á–µ–π', '–ù–∞ 2 –Ω–µ–¥–µ–ª–∏']:
                raise ValueError
            else:
                if message.text == '–ù–∞ 2..4 –Ω–æ—á–∏':
                    nights = 'mini'
                elif message.text == '–ù–∞ –Ω–µ–¥–µ–ª—é':
                    nights = 'week'
                elif message.text == '–ù–∞ 10 –Ω–æ—á–µ–π':
                    nights = 'ten_nights'
                else:
                    nights = 'two_weeks'
        else:
            async with state.proxy() as data:
                start = data['vacation_start']
            nights = (datetime.datetime.strptime(message.text.strip(), '%d.%m.%Y') - start).days
    except ValueError:
        await message.bot.send_message(message.chat.id,
                                       "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ –æ—Ç–¥—ã—Ö–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥!\n"
                                       "–ù–∞–ø—Ä–∏–º–µ—Ä: 12.12.2023",
                                       reply_markup=duration_reply_kb)
        return

    await state.update_data(nights=nights)
    await CloseQuestion.adults.set()
    await message.bot.send_message(message.chat.id,
                                   "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö —á–µ–ª–æ–≤–µ–∫",
                                   reply_markup=cancel_reply_kb)


@dp.message_handler(state=CloseQuestion.adults)
async def adults_amount(message: types.Message, state: FSMContext):
    if not(1 <= int(message.text) <= 5):
        await message.bot.send_message(message.chat.id,
                                       '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 5',
                                       reply_markup=cancel_reply_kb)
        return

    await state.update_data(adults=int(message.text))
    await CloseQuestion.filter_stars.set()
    await message.bot.send_message(message.chat.id,
                                   "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –≤ –æ—Ç–µ–ª–µ",
                                   reply_markup=cancel_reply_kb)


@dp.message_handler(state=CloseQuestion.filter_stars)
async def hotel_stars(message: types.Message, state: FSMContext):
    if not(1 <= int(message.text) <= 5):
        await message.bot.send_message(message.chat.id,
                                       '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 5',
                                       reply_markup=cancel_reply_kb)
        return

    await state.update_data(filter_stars=int(message.text))
    async with state.proxy() as data:
        adults = data['adults']
        nights = data['nights']
        d, m, y = datetime.datetime.strftime(data['vacation_start'], '%d.%m.%Y').split('.')
        start = f'{y}-{m}-{d}'
        star = data['filter_stars']
    await state.finish()
    data = await get_tour(adults, nights, start, star)
    if data:
        msg = f"–ú—ã –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å —Ç—É—Ä –≤ {data['hotel']['city']}!\n\n" \
              f"{data['hotel']['desc']}\n" \
              f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {data['min_price']} —Ä—É–±.\n" \
              f"–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã: {data['hotel']['name']}"
    else:
        msg = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—É—Ä–æ–≤ –ø–æ –∑–∞–¥–∞–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏'
    await message.bot.send_message(message.chat.id,
                                   msg,
                                   reply_markup=start_reply_kb)
